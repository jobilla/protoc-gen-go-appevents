package module

import (
	"html/template"
	"strings"

	"github.com/jobilla/protoc-gen-go-appevents/jobilla/appevents"
	pgs "github.com/lyft/protoc-gen-star/v2"
	pgsgo "github.com/lyft/protoc-gen-star/v2/lang/go"
)

const fileTpl = `// Code generated by protoc-gen-go-appevents. DO NOT EDIT.
// source: {{ .InputPath }}
package {{ package . }}

{{- define "msg" }}
{{- $name := (eventName .) }}
{{- if not (eq $name "") }}
func (m *{{ name . }}) StringType() string {
	return "{{ $name }}"
}
{{- end }}
{{- end }}

{{ range .AllMessages -}}
{{ template "msg" . -}}
{{- end }}
`

const appeventsName = "appevents"

type Module struct {
	*pgs.ModuleBase
	ctx pgsgo.Context
}

func Generator() *Module {
	return &Module{
		ModuleBase: &pgs.ModuleBase{},
	}
}

func (m *Module) InitContext(ctx pgs.BuildContext) {
	m.ModuleBase.InitContext(ctx)
	m.ctx = pgsgo.InitContext(ctx.Parameters())
}

func (m *Module) Name() string { return appeventsName }

func (m *Module) Execute(targets map[string]pgs.File, pkgs map[string]pgs.Package) []pgs.Artifact {
	tpl := template.New("appevents").Funcs(map[string]interface{}{
		"package": m.ctx.PackageName,
		"name":    m.ctx.Name,
		"eventName": func(node pgs.Node) string {
			msg, ok := node.(pgs.Message)
			if !ok {
				return ""
			}

			var eventName string
			if defined, _ := msg.Extension(appevents.E_EventName, &eventName); !defined {
				return ""
			}

			// we need to replace single backslashes with double backslashes, such that the generated Go code
			// gets a correct string representation; i.e `return "Foo\\Bar"` rather than `return "Foo\Bar"`.
			return strings.ReplaceAll(eventName, "\\", "\\\\")
		},
	})

	templ := template.Must(tpl.Parse(fileTpl))

	for _, f := range targets {
		if !hasAppeventOption(f) {
			continue
		}

		out := m.ctx.OutputPath(f).SetExt(".appevents.go")

		m.AddGeneratorTemplateFile(out.String(), templ, f)
	}

	return m.Artifacts()
}

func hasAppeventOption(f pgs.File) bool {
	if len(f.Messages()) == 0 {
		return false
	}

	for _, m := range f.AllMessages() {
		var eventName string
		if defined, _ := m.Extension(appevents.E_EventName, &eventName); defined {
			return true
		}
	}

	return false
}

var _ pgs.Module = (*Module)(nil)
